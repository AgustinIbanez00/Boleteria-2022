@page "/destinos/create"

@inject IDestinoService DestinoService
@inject NotificationService NotificationService

<h3>DestinoCreate</h3>

@if (destino == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenTemplateForm Data="@destino" Submit="@(async (DestinoRequest args) => { await Submit(args); })">
        <div class="row">
            <div class="col-md-6">
                <RadzenFieldset Text="Nuevo destino">
                    <div class="row">
                        <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Nombre" />
                        </div>
                        <div class="col-md-8">
                            <RadzenTextBox @bind-Value="destino.Nombre" style="width: 100%; margin-bottom: 10px" Name="Nombre" />
                        </div>
                    </div>
                </RadzenFieldset>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>
}

@code {
    DestinoRequest destino { get; set; }

    async Task Submit(DestinoRequest arg)
    {
        var response = await DestinoService.CreateDestinoAsync(arg);

        NotificationService.Notify(new Radzen.NotificationMessage() { Severity = response.Success ? NotificationSeverity.Success : NotificationSeverity.Error,Summary = response.Message, Duration = 3000 });   
        Console.WriteLine(response.Message);
        if (!response.Success)
        {
            foreach (var error in response.ErrorMessages)
            {
                Console.WriteLine($"key: {error.Key}");
                foreach (var validation in error.Value)
                {
                    NotificationService.Notify(new Radzen.NotificationMessage() { Severity = NotificationSeverity.Error ,Summary = validation, Duration = 3000 });
                    Console.WriteLine($"value: {validation}");
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        destino = new DestinoRequest() { Nombre = "" };
    }

    void Cancel()
    {
        //
    }

}
