@page "/destinos/create"
@inject IParadaService DestinoService
@inject NotificationService NotificationService
@inject DialogService DialogService
@using System.Text.Json
@using BlazorPWA.Services

@if (destino == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <RadzenTemplateForm Data="@destino" Submit="@(async (ParadaDTO args) => { await Submit(args); })" InvalidSubmit=@OnInvalidSubmit>
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Nombre" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox @bind-Value="destino.Nombre" style="width: 100%; margin-bottom: 10px" Name="Nombre" />
                        <RadzenRequiredValidator Component="Nombre" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" />
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
            </div>
        </div>
    </RadzenTemplateForm>

    @(Id.HasValue ? "Valor de Id " + Id : "No tiene valor id")
}

@code {
    ParadaDTO destino { get; set; }

    [Parameter]
    public long? Id { get; set; }


    async Task Submit(ParadaDTO arg)
    {
        BoleteriaOnline.Core.Utils.WebResult<ParadaDTO> response;

        if (Id.HasValue)
            response = await DestinoService.UpdateParadaAsync(destino, Id.Value);
        else
            response = await DestinoService.CreateParadaAsync(arg);

        NotificationService.Notify(new Radzen.NotificationMessage() { Severity = response.Success ? NotificationSeverity.Success : NotificationSeverity.Error, Summary = response.Message, Duration = 3000 });
        Console.WriteLine(response.Message);
        if (!response.Success)
        {
            foreach (var error in response.ErrorMessages)
            {
                Console.WriteLine($"key: {error.Key}");
                foreach (var validation in error.Value)
                {
                    NotificationService.Notify(new Radzen.NotificationMessage() { Severity = NotificationSeverity.Error, Summary = validation, Duration = 3000 });
                    Console.WriteLine($"value: {validation}");
                }
            }
        }
        else
        {
            DialogService.Close();
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine("InvalidSubmit " + JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true }));
    }

    protected async override Task OnInitializedAsync()
    {
        BoleteriaOnline.Core.Utils.WebResult<ParadaDTO> response;

        if (Id.HasValue)
        {
            destino = new ParadaDTO();

            response = await DestinoService.GetParadaAsync(Id.Value);

            if(!response.Success)
            {
                ApiService<ParadaDTO>.ShowErrors(NotificationService, response);
            }
            else
            {
                Console.WriteLine("destino nombre " + response.Result.Nombre);
                destino.Nombre = response.Result.Nombre;
                StateHasChanged();                
            }
        }
        destino = new ParadaDTO() { Nombre = "" };
    }


    void Cancel()
    {
        DialogService.Close();
    }

}
