@page "/destinos"

@inject IParadaService DestinoService
@inject NotificationService NotificationService
@inject DialogService DialogService

<h3>Destinos</h3>
<div class="m-3">
    <RadzenButton Click=@(args => OpenCreate())>
        <ChildContent>
            <RadzenIcon Icon="add"></RadzenIcon>
            <RadzenLabel Text="Crear"></RadzenLabel>
        </ChildContent>
    </RadzenButton>
    <RadzenButton Click=@(args => LoadDestinos())>
        <ChildContent>
            <RadzenIcon Icon="refresh"></RadzenIcon>
            <RadzenLabel Text="Actualizar"></RadzenLabel>
        </ChildContent>
    </RadzenButton>
</div>

@if(Destinos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
<RadzenDataGrid AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@Destinos" TItem="ParadaDTO">
    <Columns>
        <RadzenDataGridColumn Width="50px" TItem="ParadaDTO" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(Destinos.ToList().IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ParadaDTO" Property="Nombre" Title="Nombre" />
        <RadzenDataGridColumn Width="160px" TItem="ParadaDTO" Property="Id" Title="Acciones">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="edit" Click=@(args => OpenDetails(data.Id)) />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click=@(args => OpenDelete(data.Id, data.Nombre)) />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
}

@code {

    ICollection<ParadaDTO> Destinos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDestinos();

        DialogService.OnClose += CloseDialog;
    }

    async Task LoadDestinos()
    {
        var response = await DestinoService.GetParadasAsync(new BoleteriaOnline.Core.ViewModels.Pagging.Pagination() { Pagina = 1, RecordsPorPagina = 100 });

        if (response.Success)
        {
            Destinos = response.Result;
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, response.Message, response.Error);
        }
    }

    void CloseDialog(dynamic result)
    {
        Task.Run(async () => await LoadDestinos());
    }

    async Task Close(dynamic result)
    {
        await LoadDestinos();
    }


    public async Task OpenCreate()
    {
        await DialogService.OpenAsync<Pages.Destinos.DestinoCreate>($"Nuevo destino",
               new Dictionary<string, object>() { },
               new DialogOptions() { Width = "500px", Resizable = true, Draggable = true, CloseDialogOnOverlayClick = true });
    }

    public async Task OpenDetails(long id)
    {
        await DialogService.OpenAsync<Pages.Destinos.DestinoCreate>($"Editar destino",
               new Dictionary<string, object>() { { "Id", id } },
               new DialogOptions() { Width = "500px", Resizable = true, Draggable = true, CloseDialogOnOverlayClick = true });
    }

    public async Task OpenDelete(int id, string nombre)
    {
        var resultDialog = await DialogService.Confirm("¿Estás seguro de eliminar el destino?\nEsta acción no se puede deshacer.", $"Eliminar '{nombre}'.", new ConfirmOptions() { OkButtonText = "Sí", CancelButtonText = "No", CloseDialogOnOverlayClick = true });
        if (resultDialog.HasValue)
        {
            if (resultDialog.Value)
            {
                var response = await DestinoService.DeleteParadaAsync(id);
                ApiService<ParadaDTO>.NotifyResponse(NotificationService, response, async () =>
                {
                    await LoadDestinos();
                    StateHasChanged();
                });
                DialogService.Close();
            }
        }
    }

}
